global
  ### Process management and security
  log 127.0.0.1:514 local0 info
  daemon
  chroot /var/lib/haproxy
  stats socket /run/haproxy.sock mode 660 level admin
  user haproxy
  group haproxy
  # pidfile /var/run/haproxy.pid

  ### SSL https://ssl-config.mozilla.org/#server=haproxy&server-version=3.1.2&config=modern

  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private

defaults
  log global
  mode http

  timeout connect 60s
  timeout client 60s
  timeout server 120s
  timeout queue 120s
  timeout http-request 60s
  timeout http-keep-alive 60s

userlist creds
  user haproxy insecure-password Haproxy1234

frontend MAIN
  bind *:80 alpn h2,http/1.1 tfo
  bind *:443 alpn h2,http/1.1 tfo #ssl crt /etc/ssl/certs/mysite.pem

  acl HAPROXY_ACME_ACL path_beg -i /.well-known/acme-challenge/
  acl HAPROXY_STATUS_ACL path_beg -i /stats
  acl HAPROXY_PROMETHEUS_ACL path_beg -i /metrics

  ### HTTPS redirect if HTTP
  # redirect scheme https code 301 if !{ ssl_fc } !ACME_ACL

  use_backend HAPROXY_ACME_BACKEND if HAPROXY_ACME_ACL
  use_backend HAPROXY_STATS_BACKEND if HAPROXY_STATUS_ACL
  use_backend HAPROXY_PROMETHEUS_BACKEND if HAPROXY_PROMETHEUS_ACL

backend HAPROXY_ACME_BACKEND
  server certbot 127.0.0.1:7999 check inter 1s

backend HAPROXY_STATS_BACKEND
  acl AUTH_ACL http_auth(creds)
  http-request auth realm draw unless AUTH_ACL

  stats enable
  stats uri /stats
  stats refresh 30s
  stats admin if TRUE

backend HAPROXY_PROMETHEUS_BACKEND
  http-request use-service prometheus-exporter
